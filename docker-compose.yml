secrets:
  jira_auth_token:
    file: ./mosura/jira_auth_token
  jira_auth_user:
    file: ./mosura/jira_auth_user
  jira_domain:
    file: ./mosura/jira_domain
  jira_label_okr:
    file: ./mosura/jira_label_okr
  jira_other_projects:
    file: ./mosura/jira_other_projects
  jira_project:
    file: ./mosura/jira_project
  jira_team:
    file: ./mosura/jira_team

services:
  atc1441-exporter:
    container_name: atc1441-exporter
    image: quay.io/thekevjames/atc1441-exporter:0.1.8
    command: --port=9091 /app/config.ini
    restart: unless-stopped
    environment:
      - DEBUG=true
    network_mode: host
    privileged: true
    volumes:
      - ./atc1441/config.ini:/app/config.ini:Z

  caddy:
    container_name: caddy
    image: quay.io/thekevjames/caddy-security:2.7.6-1.1.22
    command: caddy run --config /config/caddy/Caddyfile --adapter caddyfile
    restart: unless-stopped
    ports:
      - 2019:2019/tcp
    env_file:
      - ./secrets/google.env
    volumes:
      - ./caddy:/config/caddy:Z

  # TODO: configure ssh tunneling
  # TODO: consider https://github.com/linuxserver/docker-mods/tree/universal-cloudflared
  cloudflared:
    container_name: cloudflared
    image: docker.io/cloudflare/cloudflared:2025.5.0@sha256:f9d5c5b94cd7337c0c939a6dbf5537db34030828c243fca6b589fd85ab25d43b
    command: tunnel --metrics 0.0.0.0:20241 run
    restart: unless-stopped
    volumes:
      - ./cloudflared:/home/nonroot/.cloudflared:Z

  docker-socket-proxy:
    container_name: docker-socket-proxy
    image: ghcr.io/tecnativa/docker-socket-proxy:0.3.0
    restart: unless-stopped
    environment:
      - CONTAINERS=1
      - POST=0
      - SERVICES=0
      - TASKS=0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  fava:
    container_name: fava
    image: quay.io/thekevjames/fava:1.30.3
    command: /data/finance/index.beancount
    restart: unless-stopped
    volumes:
      - /mnt/4tb/sync/finance:/data/finance

  grafana:
    container_name: grafana
    image: grafana/grafana:12.0.1
    restart: unless-stopped
    ports:
      - 3000:3000/tcp
    volumes:
      - ./grafana:/etc/grafana:Z
      - grafana:/var/lib/grafana

  homepage:
    container_name: homepage
    image: ghcr.io/gethomepage/homepage:v1.3.2
    restart: unless-stopped
    env_file:
      - ./secrets/homepage.env
    environment:
      - HOMEPAGE_ALLOWED_HOSTS=home.thekev.in
    volumes:
      - /mnt/1tb:/mnt/1tb
      - /mnt/4tb:/mnt/4tb
      - ./homepage:/app/config:Z

  # TODO: https://github.com/rebelcore/jellyfin_exporter
  jellyfin:
    container_name: jellyfin
    image: quay.io/linuxserver.io/jellyfin:10.10.7
    restart: unless-stopped
    ports:
      - 1900:1900/udp
      - 7359:7359/udp
      - 8096:8096/tcp
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Etc/UTC
      - UMASK=002
    volumes:
      - /mnt/4tb/movies:/data/media/movies
      - /mnt/4tb/shows:/data/media/shows
      - ./jellyfin:/config:Z
      # https://github.com/linuxserver/docker-jellyfin/blob/master/root/etc/s6-overlay/s6-rc.d/svc-jellyfin/run
      - jellyfin:/config/data
      - /config/cache
      - /config/log

  mosura:
    container_name: mosura
    image: quay.io/thekevjames/mosura:latest
    restart: unless-stopped
    environment:
      - MOSURA_APPDATA=/data
      - MOSURA_HEADER_USER_EMAIL=X-Token-User-Email
      - MOSURA_PORT=8080
    secrets:
      - jira_auth_token
      - jira_auth_user
      - jira_domain
      - jira_label_okr
      - jira_other_projects
      - jira_project
      - jira_team
    volumes:
      - ./mosura:/data:Z

  n8n:
    container_name: n8n
    image: docker.n8n.io/n8nio/n8n:1.95.2
    restart: unless-stopped
    environment:
      - GENERIC_TIMEZONE=Etc/UTC
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=false
      - N8N_METRICS=true
      - N8N_METRICS_INCLUDE_QUEUE_METRICS=true
      - N8N_HOST=n8n.thekev.in
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - N8N_RUNNERS_ENABLED=true
      - NODE_ENV=production
      - WEBHOOK_URL=https://n8n.thekev.in/
    volumes:
      - ./n8n/data:/home/node/.n8n
      - ./n8n/config:/files

  node-exporter:
    container_name: node-exporter
    image: quay.io/prometheus/node-exporter:v1.9.1
    restart: unless-stopped

  # TODO: https://github.com/eko/pihole-exporter
  pihole:
    container_name: pihole
    image: docker.io/pihole/pihole:2025.05.1
    restart: unless-stopped
    ports:
      - 53:53/tcp
      - 53:53/udp
      - 8888:80
    environment:
      - DNSMASQ_LISTENING=all
      - TZ=Etc/UTC
    volumes:
      - ./pihole/config:/etc/pihole:Z
      - ./pihole/dnsmasq:/etc/dnsmasq.d:Z

  prometheus:
    container_name: prometheus
    image: quay.io/prometheus/prometheus:v3.4.1
    command: |
      --config.file=/etc/prometheus/config.yml
      --storage.tsdb.path=/prometheus
      --storage.tsdb.retention.size=128MB
    restart: unless-stopped
    ports:
      - 9090:9090/tcp
    volumes:
      - ./prometheus:/etc/prometheus:Z
      - prometheus:/prometheus

  # TODO: https://github.com/thecfu/scraparr
  prowlarr:
    container_name: prowlarr
    image: quay.io/linuxserver.io/prowlarr:1.36.3
    restart: unless-stopped
    ports:
      - 9696:9696/tcp
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Etc/UTC
      - UMASK=002
    volumes:
      - ./prowlarr:/config:Z

  # TODO: https://github.com/esanchezm/prometheus-qbittorrent-exporter or https://github.com/martabal/qbittorrent-exporter
  qbittorrent:
    container_name: qbittorrent
    image: ghcr.io/hotio/qbittorrent:release-5.1.0
    restart: unless-stopped
    ports:
      - 8089:8080/tcp
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Etc/UTC
      - UMASK=002
    volumes:
      - /mnt/1tb/torrents:/data/torrents
      - ./qbittorrent:/config:Z

  radarr:
    container_name: radarr
    image: quay.io/linuxserver.io/radarr:5.25.0
    restart: unless-stopped
    ports:
      - 7878:7878/tcp
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Etc/UTC
      - UMASK=002
    volumes:
      - /mnt/1tb/torrents:/data/torrents
      - /mnt/4tb/movies:/data/media/movies
      - ./radarr:/config:Z

  sonarr:
    container_name: sonarr
    image: quay.io/linuxserver.io/sonarr:4.0.14
    restart: unless-stopped
    ports:
      - 8989:8989/tcp
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Etc/UTC
      - UMASK=002
    volumes:
      - /mnt/1tb/torrents:/data/torrents
      - /mnt/4tb/shows:/data/media/shows
      - ./sonarr:/config:Z

  # TODO: how can we scrape :8384/metrics with auth enabled?
  syncthing:
    container_name: syncthing
    image: quay.io/linuxserver.io/syncthing:1.29.6
    restart: unless-stopped
    ports:
      - 8384:8384
      - 22000:22000/tcp
      - 22000:22000/udp
      - 21027:21027/udp
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Etc/UTC
      - UMASK=002
    volumes:
      - /mnt/4tb/sync:/data/sync
      - ./syncthing:/config:Z

  unpackerr:
    container_name: unpackerr
    image: ghcr.io/hotio/unpackerr:release-0.14.5
    restart: unless-stopped
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Etc/UTC
      - UMASK=002
    volumes:
      - /mnt/1tb/torrents:/data/torrents
      - ./unpackerr:/config:Z

# TODO: either turn these into folders on disk or turn disk folders into docker volumes
# So long as there's a backup/recovery path, docker volumes are probably more convenient
# Example volume-based backup usage: https://jellyfin.org/docs/general/administration/backup-and-restore/
volumes:
  jellyfin: {}
  grafana: {}
  prometheus: {}
